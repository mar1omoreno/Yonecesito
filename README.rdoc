== README

### En c9.io si el botón "Run Project" no llega a funcionar, se puede usar comando: rails s -b $IP -p $PORT
### Así mismo para ejecutar en modo producción: rails s -b $IP -p $PORT -e production

This README would normally document whatever steps are necessary to get the
application up and running.

* Pasos para crear proyecto
- Editar Gemfile con gemas requeridas
- Editar config/database.yml para usar mysql2
rails generate devise:install
- Se siguen entonces instrucciones de output de devise:
----------------------
1. Ensure you have defined default url options in your environments files. Here
     is an example of default_url_options appropriate for a development environment
     in config/environments/development.rb:
       config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

     In production, :host should be set to the actual host of your application.

  2. Ensure you have defined root_url to *something* in your config/routes.rb.
     For example:

       root to: "home#index"

  3. Ensure you have flash messages in app/views/layouts/application.html.erb.
     For example:

       <p class="notice"><%= notice %></p>
       <p class="alert"><%= alert %></p>

  4. If you are deploying on Heroku with Rails 3.2 only, you may want to set:

       config.assets.initialize_on_precompile = false

     On config/application.rb forcing your application to not access the DB
     or load models when precompiling your assets.

  5. You can copy Devise views (for customization) to your app by running:

       rails g devise:views
----------------------
- Editar config/initializers/devise.rb agregando uso de omniauth y credenciales de facebook
- Se modofica config/initializers/inflections.rb para singular/plural de profesionista
rails generate devise Profesionista
rails generate devise Cliente
rails generate migration add_facebook_to_clientes
- Editar db/migrate/*add_facebook_to_clientes.rb
rails generate migration add_nombre_to_clientes
- Editar db/migrate/*add_nombre_to_clientes.rb
rails generate migration remove_index_email_to_clients
- Editar db/migrate/*remove_index_email_to_clients
rails generate migration add_nombre_to_profesionistas
- Editar db/migrate/*add_nombre_to_profesionistas.rb
- Editar config/routes con controladores para profesionistas y clientes
- Crear a mano app/controllers/clienteregistrations_controller.rb y app/controllers/profesionistaregistrations_controller.rb
- Editar config/locales/devise.en.yml con mensajes de los controladores anteriores
- Crear a mano app/controllers/omniauth_callbacks_controller.rb
- Editar app/helpers/application_helper.rb
- Editar app/models/cliente.rb
- Editar app/models/profesionista.rb
rails generate controller inicio index
rails generate devise:views
- Editar app/assets/stylesheets/application.css
 *= require_tree .
 *= require_self
 *= require font-awesome
- Editar app/assets/stylesheets/application.js
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require bootstrap
//= require_tree .
- A partir de ese punto se pueden modificar vistas de inicio, devise y app/views/layouts/application.html.erb

* EN GENERAL

- Para evitar problemas con 'rake db:migrate','rake db:migrate RAILS_ENV=test' en bases de datos existentes 
se puede poner el timestamp de los archivos en db/migrate en un tiempo pasado (idealmente original de los cambios que representan)

También se puede usar rake db:schema:dump https://hackhands.com/ruby-rails-tutorial-creating-rails-instance-existing-mysql-db/
para hacer ingeniería inversa en base de datos y así evitar crear archivos de migración (no crea los archivos de los modelos)

##### Definición de mailer
- Se siguen instrucciones de http://guides.rubyonrails.org/action_mailer_basics.html
- rails generate mailer UsuarioMailer
- Resultado es app/mailers/usuario_mailer.rb y carpeta app/views/usuario_mailer
- Se modifica usuario_mailer.rb agregando funciones de envío de correo y se agregan vistas en usuario_mailer correspondientes
- Por ejemplo, usuario_mailer.rb con función "enviar_correo" ocupa crear vistas "enviar_correo.html.erb", "enviar_correo.text.erb" en carpeta usuario_mailer
- Se modifica config/environments/development.rb para asignar un host y que se pueda usar url_for en scripts ActionMailer

##### Idioma y formato de tiempo
- Se modifica archivo config/environments/development.rb (y production) agregando  config.i18n.default_locale = :es
- En esos archivos de config/environments ó config/application.rb se agrega: config.time_zone = 'Mexico City'
- Para Devise descargar el archivo en español (vigilar versión) en https://github.com/plataformatec/devise/wiki/I18n#spanish-deviseesyml
- Colocar el archivo de devise en config/locales/devise.es.yml
- Se crea archivo config/locales/es.yml y se alimenta con https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/es-MX.yml
- Para formatear fechas en vistas se usa <%= l mi_fecha %> ó <%= l mi_fecha, format: :long|:short| %> Formatos definidos en es.yml

##### Creación de tareas automáticas con Cron
- En consola instalamos la gema: gem install whenever
- En Gemfile agregamos la línea: gem 'whenever', '~> 0.9.4'
- En consola en raíz del proyecto: wheneverize .
- El nuevo archivo creado con el comando anterior es config/schedule.rb el cual se edita según necesidad
- schedule.rb puede definir variable del entorno usado:     set :environment, 'development'
- Al editar schedule.rb se puede ejecutar en consola: whenever -i
- Dependiendo del servidor puede ser necesario activar daemon de cron en consola: sudo cron start

##### Ajustes para producción
- En config/secrets.yml para production se debe asignar un secret_key_base el cual se puede hacer creando la variable de entorno (ej Amazon WS) o usando la misma línea que en development 
- En config/initializers/devise.rb ajustar:  config.mailer_sender
- Traducir vistas en app/views/devise/mailer/ (también carpetas passwords, confirmations y unlocks)
- Configurar whenever
- ###### AL MENOS PARA AWS
--- En carpeta bin/ aplicar: sudo chmod 755 ./*
--- En carpeta log/ aplicar: sudo chmod 666 ./*
--- En base de datos basada en RDS se ejecuta:
------ ALTER DATABASE yonecesito DEFAULT COLLATE utf8_unicode_ci;
------ ALTER DATABASE yonecesito DEFAULT CHARACTER SET utf8;
--- Para tablas de bases de datos previamente alimentadas con datos no UTF8, se puede convertir: ALTER TABLE tbl_name CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci;


##### USO DE GIT CON BITBUCKET
Para respaldar el proyecto en un repositorio bitbucket se puede estar en el workspace del proyecto actual y usar:
- git init
La cuenta de c9 tiene una sección SSH keys donde se puede copiar el rsa para luego ir a la cuenta en página de
bitbucket / Manage Account / SSH keys donde se agrega el key de c9. De esta forma se pueden ejecutar los comandos:
- git remote add origin git@bitbucket.org:{cuenta}/{repositorio}.git
- git add *
- git commit - m 'primer commit'
- git push origin master
En caso de que add * falle por .gitignore vale la pena usar opción -f sugerida por output ó editar .gitignore 


##################### FUNCIONALIDADES PENDIENTES
- AXEL: Cambiar env a producción en aws

################ CONTENIDOS PENDIENTES A RECIBIR
- valores de criterio "urgencia" en solicitud de trabajo
- redirigir dominio yonecesito.mx a aws
- costo de créditos final para aplicar a un trabajo (profesionsita)
- cliente debe cambiar su app de facebook a producción


######### agregado campo servicioimagen tabla trabajos
##agrege gema gem 'jquery-ui-rails' para calendar su uso 
##agregada gema 'moment-rails' (y su correspondente línea en application.js' para manejo de fechas en datos_basicos